
Note: $BASE_URL for sandbox "https://www.kempas.tk/karely"


Updated on 28 May 2020, add login, logout, verifyAccessToke, signUp, verifyAuthroizationCode, resetPassword, updatePassword  
Updated on 08 Jun 2020, add check user group, list users, get user info, update user and delete user function (Add group and session token check)
Updated on 12 Jun 2020, add extra error code 560 for login, add generate email authorization code, add google and facebook login function, change verify authorization code response data

CURL example:
$ curl -d '{"email":"XXXXX@YYYYYYY.com", "password": "XXXXXX"}' -H "Content-Type: application/json" -X POST http://localhost:3000/api/users/login



-------------------------------------------------------------------------------
Login function

Method: POST
Server URL: {$BASE_URL}/api/users/login

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		"email": "user email address",
		"password": "user password"
	}	


Response body:	
	Good response body (status 200)
	{
		"id": 25,
		"first_name": "CheowKwee",
  		"last_name": "Goh",
  		"email": "cheowkwee@hotmail.com",
  		"phone_number": "+60126196907",
  		"avatar": null,
  		"biography": null,
  		"account_type": 0,
  		"status": 1,
  		"login_failed_count": 0,
		"created_on": "2020-06-07T18:35:11.316Z",
  		"updated_on": "2020-06-07T18:35:11.316Z",
  		"session": {
    			"token": "4ef4c395-aed4-4e42-a053-bb7de9dfa8b2",
    			"user_id": 4,
    			"remark": "Normal user session",
    			"session_type": 0,
    			"expired_on": "2020-07-07T18:41:21.867Z",
    			"created_on": "2020-06-07T18:41:21.871Z",
    			"updated_on": "2020-06-07T18:41:21.871Z"
  		},
  		"userGroups": [
			{
      				"id": 2,
      				"group_id": 1,
      				"user_id": 4,
      				"created_on": "2020-06-07T18:35:11.323Z",
      				"updated_on": "2020-06-07T18:35:11.323Z",
      				"group_name": "KARELY"
    			}
  		]
	}

	Bad response body (status 400, 401, 402, 560)
	{
		"message": "Error message"
	}

	Note: Status 560 for user email pending for verification


-------------------------------------------------------------------------------

Logout function

Method: POST
Server URL: {$BASE_URL}/api/users/logout

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		"token": "user access token from login output"
	}	


Response body:	
	Good response body (status 200)
		99	// return user id 

	Bad response body (status 400)
	{
		"message": "Error message"
	}


-------------------------------------------------------------------------------
Verify access token function

Method: POST
Server URL: {$BASE_URL}/api/users/verifyAccessToken

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		"token": "user access token from login output"
	}	


Response body:	
	Good response body (status 200)
		99	// return user id 

	Bad response body (status 400)
	{
		"message": "Error message"
	}


-------------------------------------------------------------------------------

Sign up function

Method: POST
Server URL: {$BASE_URL}/api/users/signUp

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		"first_name": "user first name"
		"last_name": "user last name"
		"phone_number": "user mobile phone number"
		"email": "user email address (username)",
		"password": "user password"
	}	


Response body:	
	Good response body (status 200)
	{
		"id": 26,
		"first_name": "CheowKwee",
		"last_name": "Goh",
		"email": "cheowkwee@hotmail.com",
		"phone_number": "+60126196907",
		"avatar": null,
		"biography": null,
		"account_type": 0,
		"status": 0,
		"login_failed_count": 0,
		"created_on": "2020-05-25T10:47:17.704Z",
		"updated_on": "2020-05-25T10:47:17.704Z",
		"session": {
			"token": "90716fa4-18ff-4a32-a8a1-46b91b752cb2",	// token for verify authorization code function
			"user_id": 26,
			"remark": "Email authorization code",
			"session_type": 9,
			"expired_on": "2020-06-25T10:47:17.709Z",
			"created_on": "2020-05-25T10:47:17.712Z",
			"updated_on": "2020-05-25T10:47:17.712Z"
		}
	}

	Bad response body (status 400)
	{
		"message": "Error message"
	}


-------------------------------------------------------------------------------

Verify authorization code function
- Verify the user email authorization code after sign up
- The authorization code will send to user after sign up function
- 12 Jun 2020 change the good response data from user ID to valid login session

Method: POST
Server URL: {$BASE_URL}/api/users/verifyAuthorizationCode

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "email authorization token"

Request body (JSON format):
	{
		"code": "user email authorization code (4 or 6 digit code) ",
	}	


Response body:	
	Good response body (status 200)
	{
		"id": 25,
		"first_name": "CheowKwee",
  		"last_name": "Goh",
  		"email": "cheowkwee@hotmail.com",
  		"phone_number": "+60126196907",
  		"avatar": null,
  		"biography": null,
  		"account_type": 0,
  		"status": 1,
  		"login_failed_count": 0,
		"created_on": "2020-06-07T18:35:11.316Z",
  		"updated_on": "2020-06-07T18:35:11.316Z",
  		"session": {
    			"token": "4ef4c395-aed4-4e42-a053-bb7de9dfa8b2",
    			"user_id": 4,
    			"remark": "Normal user session",
    			"session_type": 0,
    			"expired_on": "2020-07-07T18:41:21.867Z",
    			"created_on": "2020-06-07T18:41:21.871Z",
    			"updated_on": "2020-06-07T18:41:21.871Z"
  		},
  		"userGroups": [
			{
      				"id": 2,
      				"group_id": 1,
      				"user_id": 4,
      				"created_on": "2020-06-07T18:35:11.323Z",
      				"updated_on": "2020-06-07T18:35:11.323Z",
      				"group_name": "KARELY"
    			}
  		]
	}

	Bad response body (status 400)
	{
		"message": "Error message"
	}


-------------------------------------------------------------------------------

Reset passowrd function

Method: POST
Server URL: {$BASE_URL}/api/users/resetPassword

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		"email": "user email address"
	}	


Response body:	
	Good response body (status 200)
	{
		"id": 25,
  		"last_name": "Goh",
  		"email": "cheowkwee@hotmail.com",
  		"phone_number": "+60126196907",
  		"avatar": null,
  		"biography": null,
  		"account_type": 0,
  		"status": 1,
  		"login_failed_count": 0,
  		"created_on": "2020-05-24T17:33:41.470Z",
  		"updated_on": "2020-05-24T17:33:41.470Z",
  		"session": {
    			"token": "557abf55-3964-4f4f-9002-8fcc99de863c",
    			"user_id": 25,
    			"remark": "Reset password",
    			"session_type": 8,
    			"expired_on": "2020-06-25T10:30:29.105Z",
    			"created_on": "2020-05-25T10:30:29.110Z",
    			"updated_on": "2020-05-25T10:30:29.110Z"
  		}
	}

	Bad response body (status 400 and 40*)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Update password function

Method: POST
Server URL: {$BASE_URL}/api/users/updatePassword

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "token for reset password"

Request body (JSON format):
	{
		"password": "user password"
	}	


Response body:	
	Good response body (status 200)

		99	// return user id 

	Bad response body (status 400)
	{
		"message": "Error message"
	}


-------------------------------------------------------------------------------

List users function 
Note: only admin group user can access this function

Method: GET
Server URL: {$BASE_URL}/api/users

Path parameter: None
Query parameter: None
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "Login session token"

Request body (JSON format):


Response body:	
	Good response body (status 200)
	[
		{ /* user record 1 */ },
		{ /* user record 2 */ },
		...
		{ /* user record n */ }
	]

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Get user record with user ID function
Note: Normal user only can access own record

Method: GET
Server URL: {$BASE_URL}/api/users/{user ID}

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "Login session token"

Request body (JSON format):


Response body:	
	Good response body (status 200)
	{ /* user record  */ },

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Update user record with user ID function
Note: Normal user only can update own record

Method: POST
Server URL: {$BASE_URL}/api/users/update

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "Login session token"

Request body (JSON format):
	{
		id: "User ID; Key for the record",
		first_name: "Valid data value",
		last_name: "Valid data value",
		email: "Valid data value",
		phone_number: "Valid data value",
		avatar: "Valid data value",
		biography: "Valid data value"
	}

Response body:	
	Good response body (status 200)

		99	// return user id 

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Delete or remove user record with user ID function
Note: Normal user only can update own record

Method: POST
Server URL: {$BASE_URL}/api/users/delete

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "Login session token"

Request body (JSON format):
	{
		user_id: "Valid data value",
	}

Response body:	
	Good response body (status 200)

		99	// return user id 

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Check user group with user ID and group name function

Method: POST
Server URL: {$BASE_URL}/api/users/checkUserGroup

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"
	2) "token": "Login session token"

Request body (JSON format):
	{
		user_id: "Valid user ID",
		group_name: "Valid group name",
	}

Response body:	
	Good response body (status 200)
	{
		// return user group info
	}

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Generate email authorization code function

Method: POST
Server URL: {$BASE_URL}/api/users/generateEmailAuthorizationCode

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		email: "user email"
	}

Response body:	
	Good response body (status 200)
	{
		"id": 26,
		"first_name": "CheowKwee",
		"last_name": "Goh",
		"email": "cheowkwee@hotmail.com",
		"phone_number": "+60126196907",
		"avatar": null,
		"biography": null,
		"account_type": 0,
		"status": 0,
		"login_failed_count": 0,
		"created_on": "2020-05-25T10:47:17.704Z",
		"updated_on": "2020-05-25T10:47:17.704Z",
		"session": {
			"token": "90716fa4-18ff-4a32-a8a1-46b91b752cb2",	// token for verify authorization code function
			"user_id": 26,
			"remark": "Email authorization code",
			"session_type": 9,
			"expired_on": "2020-06-25T10:47:17.709Z",
			"created_on": "2020-05-25T10:47:17.712Z",
			"updated_on": "2020-05-25T10:47:17.712Z"
		}
	}

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Google login function (sign up or login for Karely application after Google OAUTH login)

Method: POST
Server URL: {$BASE_URL}/api/users/googleLogin

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		user_id: "Google user id",
		access_token: "Google login access token"
	}

Response body:	
	Good response body (status 200)
	{
  		"id": 27,						// Karely user ID
  		"first_name": "XXXXX",					// first name from Google
  		"last_name": "XXXXX",					// last name from Google
  		"email": "XXXXX",					// email from Google
  		"phone_number": null,
  		"avatar": "XXXXXXXXXXXXXXXXX",				// picture url from Google
  		"biography": null,
  		"account_type": 1,					// 0 for Karely; 1 for Google; 2 for Google
  		"account_id": "9999999999999999",			// Google ID
  		"status": 0,
  		"login_failed_count": 0,
  		"last_login_on": null,
  		"email_verification_flag": false,
  		"email_verification_on": null,
  		"email_show_flag": false,
  		"phone_verification_flag": false,
  		"phone_verification_on": null,
  		"phone_show_flag": false,
  		"created_on": "2020-06-11T18:06:35.403Z",
  		"updated_on": "2020-06-11T18:06:35.403Z",
  		"new_flag": true,					// first time login or sign up value is true
  		"session": {
    			"token": "bd34f9b7-b99e-437e-9829-aec275bc1b15",
    			"user_id": 27,
    			"remark": "Normal user session",
    			"session_type": 0,
    			"expired_on": "2020-07-11T18:06:35.410Z",
    			"created_on": "2020-06-11T18:06:35.413Z",
    			"updated_on": "2020-06-11T18:06:35.413Z"
  		},
  		"userGroups": [
    			{
      				"id": 6,
      				"group_id": 1,
      				"user_id": 27,
      				"created_on": "2020-06-11T18:06:35.409Z",
      				"updated_on": "2020-06-11T18:06:35.409Z",
      				"group_name": "KARELY"
    			}
  		]
	}

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------

Facebook login function (sign up or login for Karely application after Facebook OAUTH login)

Method: POST
Server URL: {$BASE_URL}/api/users/facebookLogin

Path parameter: None
Query parameter: None
	
Header parameter: 
	1) "Content-Type": "application/json"

Request body (JSON format):
	{
		user_id: "Facebook user id",
		access_token: "Facebook login access token"
	}

Response body:	
	Good response body (status 200)
	{
  		"id": 27,						// Karely user ID
  		"first_name": "",
  		"last_name": "XXXXX XXXXX",				// name from Facebook
  		"email": null,
  		"phone_number": null,
  		"avatar": null,
  		"biography": null,
  		"account_type": 2,					// 0 for Karely; 1 for Google; 2 for Facebook
  		"account_id": "999999999999999",			// Facebook ID
  		"status": 0,
  		"login_failed_count": 0,
  		"last_login_on": null,
  		"email_verification_flag": false,
  		"email_verification_on": null,
  		"email_show_flag": false,
  		"phone_verification_flag": false,
  		"phone_verification_on": null,
  		"phone_show_flag": false,
  		"created_on": "2020-06-11T18:06:35.403Z",
  		"updated_on": "2020-06-11T18:06:35.403Z",
  		"new_flag": true,					// first time login or sign up value is true
  		"session": {
    			"token": "bd34f9b7-b99e-437e-9829-aec275bc1b15",
    			"user_id": 27,
    			"remark": "Normal user session",
    			"session_type": 0,
    			"expired_on": "2020-07-11T18:06:35.410Z",
    			"created_on": "2020-06-11T18:06:35.413Z",
    			"updated_on": "2020-06-11T18:06:35.413Z"
  		},
  		"userGroups": [
    			{
      				"id": 6,
      				"group_id": 1,
      				"user_id": 27,
      				"created_on": "2020-06-11T18:06:35.409Z",
      				"updated_on": "2020-06-11T18:06:35.409Z",
      				"group_name": "KARELY"
    			}
  		]
	}

	Bad response body (status 400, 401, 403)
	{
		"message": "Error message"
	}

-------------------------------------------------------------------------------
